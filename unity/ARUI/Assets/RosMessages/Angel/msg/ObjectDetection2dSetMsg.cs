//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Angel
{
    [Serializable]
    public class ObjectDetection2dSetMsg : Message
    {
        public const string k_RosMessageName = "angel_msgs/ObjectDetection2dSet";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  A collection of 2D object detections predicted on a source 2D image.
        // 
        //  This message does not use ObjectDetection2D as a means of vectorizing
        //  components for efficient packing reasons.
        // 
        //  Box [left,right,top,bottom] origin is coordinate is the upper-left of the
        //  source image.
        // 
        //  Example: Getting the max-conf labels for each detection (Python)
        //  >>> np.asarray(msg.label_vec)[
        //  ...     np.asarray(msg.label_confidences)
        //  ...     .reshape(msg.num_detections, len(msg.label_vec))
        //  ...     .argmax(axis=1)
        //  ... ]
        // 
        //  Header frame_id should indicate the source these detections were predicted
        //  over.
        public Std.HeaderMsg header;
        //  Timestamp of the source image these predictions pertain to.
        public BuiltinInterfaces.TimeMsg source_stamp;
        //  Prediction classification labels.
        //  Each detection in this set should have a confidence prediction for each of
        //  these labels, in the [0,1] range.
        //  If a detector does not yield a confidence for a label, then a 0 should be
        //  used for labels it did not predict.
        public string[] label_vec;
        //  Number of detections contained in this set.
        public long num_detections;
        //  Vector of detection axis aligned bounding box bounds coordinates.
        //  Each vector here should be of congruent length, where value `i` corresponds
        //  to the coordinate for detection `i`.
        public float[] left;
        public float[] right;
        public float[] top;
        public float[] bottom;
        //  Predicted label confidences for detections.
        //  This is a flattened 2D row-major matrix with shape:
        //    [num_detections, len(label_vec)]
        public double[] label_confidences;
        // ##############################################################################
        //  DEPRECATED
        // 
        //  Vector length of each descriptor.
        public int descriptor_dim;
        //  Flattened descriptor vector. The length of this list should be equal to
        //  num_detections * descriptor_dims.
        public double[] descriptors;
        //  Optional fields for Berkeley object detector.
        //  Each of these vectors is expected to be of length num_detections.
        public bool[] obj_obj_contact_state;
        public float[] obj_obj_contact_conf;
        public bool[] obj_hand_contact_state;
        public float[] obj_hand_contact_conf;

        public ObjectDetection2dSetMsg()
        {
            this.header = new Std.HeaderMsg();
            this.source_stamp = new BuiltinInterfaces.TimeMsg();
            this.label_vec = new string[0];
            this.num_detections = 0;
            this.left = new float[0];
            this.right = new float[0];
            this.top = new float[0];
            this.bottom = new float[0];
            this.label_confidences = new double[0];
            this.descriptor_dim = 0;
            this.descriptors = new double[0];
            this.obj_obj_contact_state = new bool[0];
            this.obj_obj_contact_conf = new float[0];
            this.obj_hand_contact_state = new bool[0];
            this.obj_hand_contact_conf = new float[0];
        }

        public ObjectDetection2dSetMsg(Std.HeaderMsg header, BuiltinInterfaces.TimeMsg source_stamp, string[] label_vec, long num_detections, float[] left, float[] right, float[] top, float[] bottom, double[] label_confidences, int descriptor_dim, double[] descriptors, bool[] obj_obj_contact_state, float[] obj_obj_contact_conf, bool[] obj_hand_contact_state, float[] obj_hand_contact_conf)
        {
            this.header = header;
            this.source_stamp = source_stamp;
            this.label_vec = label_vec;
            this.num_detections = num_detections;
            this.left = left;
            this.right = right;
            this.top = top;
            this.bottom = bottom;
            this.label_confidences = label_confidences;
            this.descriptor_dim = descriptor_dim;
            this.descriptors = descriptors;
            this.obj_obj_contact_state = obj_obj_contact_state;
            this.obj_obj_contact_conf = obj_obj_contact_conf;
            this.obj_hand_contact_state = obj_hand_contact_state;
            this.obj_hand_contact_conf = obj_hand_contact_conf;
        }

        public static ObjectDetection2dSetMsg Deserialize(MessageDeserializer deserializer) => new ObjectDetection2dSetMsg(deserializer);

        private ObjectDetection2dSetMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.source_stamp = BuiltinInterfaces.TimeMsg.Deserialize(deserializer);
            deserializer.Read(out this.label_vec, deserializer.ReadLength());
            deserializer.Read(out this.num_detections);
            deserializer.Read(out this.left, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.right, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.top, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.bottom, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.label_confidences, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.descriptor_dim);
            deserializer.Read(out this.descriptors, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.obj_obj_contact_state, sizeof(bool), deserializer.ReadLength());
            deserializer.Read(out this.obj_obj_contact_conf, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.obj_hand_contact_state, sizeof(bool), deserializer.ReadLength());
            deserializer.Read(out this.obj_hand_contact_conf, sizeof(float), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.source_stamp);
            serializer.WriteLength(this.label_vec);
            serializer.Write(this.label_vec);
            serializer.Write(this.num_detections);
            serializer.WriteLength(this.left);
            serializer.Write(this.left);
            serializer.WriteLength(this.right);
            serializer.Write(this.right);
            serializer.WriteLength(this.top);
            serializer.Write(this.top);
            serializer.WriteLength(this.bottom);
            serializer.Write(this.bottom);
            serializer.WriteLength(this.label_confidences);
            serializer.Write(this.label_confidences);
            serializer.Write(this.descriptor_dim);
            serializer.WriteLength(this.descriptors);
            serializer.Write(this.descriptors);
            serializer.WriteLength(this.obj_obj_contact_state);
            serializer.Write(this.obj_obj_contact_state);
            serializer.WriteLength(this.obj_obj_contact_conf);
            serializer.Write(this.obj_obj_contact_conf);
            serializer.WriteLength(this.obj_hand_contact_state);
            serializer.Write(this.obj_hand_contact_state);
            serializer.WriteLength(this.obj_hand_contact_conf);
            serializer.Write(this.obj_hand_contact_conf);
        }

        public override string ToString()
        {
            return "ObjectDetection2dSetMsg: " +
            "\nheader: " + header.ToString() +
            "\nsource_stamp: " + source_stamp.ToString() +
            "\nlabel_vec: " + System.String.Join(", ", label_vec.ToList()) +
            "\nnum_detections: " + num_detections.ToString() +
            "\nleft: " + System.String.Join(", ", left.ToList()) +
            "\nright: " + System.String.Join(", ", right.ToList()) +
            "\ntop: " + System.String.Join(", ", top.ToList()) +
            "\nbottom: " + System.String.Join(", ", bottom.ToList()) +
            "\nlabel_confidences: " + System.String.Join(", ", label_confidences.ToList()) +
            "\ndescriptor_dim: " + descriptor_dim.ToString() +
            "\ndescriptors: " + System.String.Join(", ", descriptors.ToList()) +
            "\nobj_obj_contact_state: " + System.String.Join(", ", obj_obj_contact_state.ToList()) +
            "\nobj_obj_contact_conf: " + System.String.Join(", ", obj_obj_contact_conf.ToList()) +
            "\nobj_hand_contact_state: " + System.String.Join(", ", obj_hand_contact_state.ToList()) +
            "\nobj_hand_contact_conf: " + System.String.Join(", ", obj_hand_contact_conf.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
