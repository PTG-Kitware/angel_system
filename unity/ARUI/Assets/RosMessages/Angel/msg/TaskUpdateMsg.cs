//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Angel
{
    [Serializable]
    public class TaskUpdateMsg : Message
    {
        public const string k_RosMessageName = "angel_msgs/TaskUpdate";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  Represents the current status of the task being performed.
        // 
        //  Standard ROS message header
        public Std.HeaderMsg header;
        //  Task name
        public string task_name;
        //  Task description
        public string task_description;
        //  Timestamp of the latest input that has gone into this task update estimation.
        public BuiltinInterfaces.TimeMsg latest_sensor_input_time;
        //  The index of the step currently in progress.
        //  A value of `-1` indicates that no step has been started yet.
        public sbyte current_step_id;
        //  String of the step currently in progress.
        public string current_step;
        //  Previous step is the step worked on before the current step.
        public string previous_step;
        //  Current confidence from the HMM that a recipe is complete.
        //  Only task_monitor_v2 will fill this in.
        public float task_complete_confidence;
        //  Array of length n_steps (same length as `steps` above) that indicates which
        //  steps, by index association, are complete.
        public bool[] completed_steps;
        // ##############################################################################
        // 
        //  DEPRECATED FIELDS
        // 
        //  List of steps for this task
        //  --> Users should instead query the QueryTaskGraph service.
        public string[] steps;
        //  Current activity classification prediction
        public string current_activity;
        public string next_activity;
        //  Items required
        public TaskItemMsg[] task_items;
        //  Time remaining to move to next task (e.g. waiting for tea to steep)
        //  -1 means that this is not a time based task
        public int time_remaining_until_next_task;
        //  Array of relevant task step HMM step confidence scores. This includes the HMM
        //  background class as index 0.
        //  TODO: This should be its own separate message, implementation dependent
        public float[] hmm_step_confidence;

        public TaskUpdateMsg()
        {
            this.header = new Std.HeaderMsg();
            this.task_name = "";
            this.task_description = "";
            this.latest_sensor_input_time = new BuiltinInterfaces.TimeMsg();
            this.current_step_id = 0;
            this.current_step = "";
            this.previous_step = "";
            this.task_complete_confidence = 0.0f;
            this.completed_steps = new bool[0];
            this.steps = new string[0];
            this.current_activity = "";
            this.next_activity = "";
            this.task_items = new TaskItemMsg[0];
            this.time_remaining_until_next_task = 0;
            this.hmm_step_confidence = new float[0];
        }

        public TaskUpdateMsg(Std.HeaderMsg header, string task_name, string task_description, BuiltinInterfaces.TimeMsg latest_sensor_input_time, sbyte current_step_id, string current_step, string previous_step, float task_complete_confidence, bool[] completed_steps, string[] steps, string current_activity, string next_activity, TaskItemMsg[] task_items, int time_remaining_until_next_task, float[] hmm_step_confidence)
        {
            this.header = header;
            this.task_name = task_name;
            this.task_description = task_description;
            this.latest_sensor_input_time = latest_sensor_input_time;
            this.current_step_id = current_step_id;
            this.current_step = current_step;
            this.previous_step = previous_step;
            this.task_complete_confidence = task_complete_confidence;
            this.completed_steps = completed_steps;
            this.steps = steps;
            this.current_activity = current_activity;
            this.next_activity = next_activity;
            this.task_items = task_items;
            this.time_remaining_until_next_task = time_remaining_until_next_task;
            this.hmm_step_confidence = hmm_step_confidence;
        }

        public static TaskUpdateMsg Deserialize(MessageDeserializer deserializer) => new TaskUpdateMsg(deserializer);

        private TaskUpdateMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.task_name);
            deserializer.Read(out this.task_description);
            this.latest_sensor_input_time = BuiltinInterfaces.TimeMsg.Deserialize(deserializer);
            deserializer.Read(out this.current_step_id);
            deserializer.Read(out this.current_step);
            deserializer.Read(out this.previous_step);
            deserializer.Read(out this.task_complete_confidence);
            deserializer.Read(out this.completed_steps, sizeof(bool), deserializer.ReadLength());
            deserializer.Read(out this.steps, deserializer.ReadLength());
            deserializer.Read(out this.current_activity);
            deserializer.Read(out this.next_activity);
            deserializer.Read(out this.task_items, TaskItemMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.time_remaining_until_next_task);
            deserializer.Read(out this.hmm_step_confidence, sizeof(float), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.task_name);
            serializer.Write(this.task_description);
            serializer.Write(this.latest_sensor_input_time);
            serializer.Write(this.current_step_id);
            serializer.Write(this.current_step);
            serializer.Write(this.previous_step);
            serializer.Write(this.task_complete_confidence);
            serializer.WriteLength(this.completed_steps);
            serializer.Write(this.completed_steps);
            serializer.WriteLength(this.steps);
            serializer.Write(this.steps);
            serializer.Write(this.current_activity);
            serializer.Write(this.next_activity);
            serializer.WriteLength(this.task_items);
            serializer.Write(this.task_items);
            serializer.Write(this.time_remaining_until_next_task);
            serializer.WriteLength(this.hmm_step_confidence);
            serializer.Write(this.hmm_step_confidence);
        }

        public override string ToString()
        {
            return "TaskUpdateMsg: " +
            "\nheader: " + header.ToString() +
            "\ntask_name: " + task_name.ToString() +
            "\ntask_description: " + task_description.ToString() +
            "\nlatest_sensor_input_time: " + latest_sensor_input_time.ToString() +
            "\ncurrent_step_id: " + current_step_id.ToString() +
            "\ncurrent_step: " + current_step.ToString() +
            "\nprevious_step: " + previous_step.ToString() +
            "\ntask_complete_confidence: " + task_complete_confidence.ToString() +
            "\ncompleted_steps: " + System.String.Join(", ", completed_steps.ToList()) +
            "\nsteps: " + System.String.Join(", ", steps.ToList()) +
            "\ncurrent_activity: " + current_activity.ToString() +
            "\nnext_activity: " + next_activity.ToString() +
            "\ntask_items: " + System.String.Join(", ", task_items.ToList()) +
            "\ntime_remaining_until_next_task: " + time_remaining_until_next_task.ToString() +
            "\nhmm_step_confidence: " + System.String.Join(", ", hmm_step_confidence.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
