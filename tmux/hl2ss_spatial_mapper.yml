#
# System configuration to run the ANGEL system with the HL2SS plugin and send
# 3D object detections to the ARUI.
#

name: HL2SS Spatial Mapper
root: <%= ENV["ANGEL_WORKSPACE_DIR"] %>

# Optional tmux socket
# socket_name: foo

# Note that the pre and post options have been deprecated and will be replaced by
# project hooks.

# Project hooks

# Runs on project start, always
# on_project_start: command
on_project_start: |
  export ROS_NAMESPACE=${ROS_NAMESPACE:-/debug}
  export HL2_IP=${HL2_IP:-192.168.86.48}
  export CONFIG_DIR=${ANGEL_WORKSPACE_DIR}/config
  export NODE_CONFIG_DIR=${ANGEL_WORKSPACE_DIR}/src/angel_system_nodes/configs
  export MODEL_DIR=${ANGEL_WORKSPACE_DIR}/model_files
  # NOTE: CycloneDDS seems to work a lot better in this configuration for me (Josh).
  # With the default implementation (rmw_fastrtps_cpp), the object detector node
  # would freeze frequently. I have not seen it freeze with CycloneDDS... yet...
  export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# Run on project start, the first time
# on_project_first_start: command

# Run on project start, after the first time
# on_project_restart: command

# Run on project exit ( detaching from tmux session )
# on_project_exit: command

# Run on project stop
# on_project_stop: command

# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
# pre_window: rbenv shell 2.0.0-p247

# Pass command line options to tmux. Useful for specifying a different tmux.conf.
# tmux_options: -f ~/.tmux.mac.conf
tmux_options: -f <%= ENV["ANGEL_WORKSPACE_DIR"] %>/tmux/tmux.conf

windows:
  - datahub: ros2 run ros_tcp_endpoint default_server_endpoint --ros-args
      -r __ns:=${ROS_NAMESPACE}
      -p ROS_IP:=0.0.0.0
  - hl2ss: ros2 run angel_system_nodes hl2ss_ros_bridge --ros-args
      -r __ns:=${ROS_NAMESPACE}
      -p ip_addr:=${HL2_IP}
      -p image_topic:=PVFramesBGR
      -p hand_pose_topic:=HandJointPoseData
      -p audio_topic:=HeadsetAudioData
      -p sm_topic:=SpatialMapData
      -p head_pose_topic:=HeadsetPoseData
      -p pv_width:=1280
      -p pv_height:=720
      -p pv_framerate:=30
      -p sm_freq:=5

  # Visualize PV Images being output from the headset
  - rqt_pv_images: rqt -s rqt_image_view/ImageView
      --args ${ROS_NAMESPACE}/PVFramesBGR
      --ros-args -p _image_transport:=raw

  - object_detector: ros2 run angel_system_nodes object_detector_with_descriptors --ros-args
      -r __ns:=${ROS_NAMESPACE}
      -p image_topic:=PVFramesBGR
      -p descriptor_topic:=ObjectDetections
      -p min_time_topic:=ObjDetMinTime
      -p torch_device:=cuda:0
      -p detection_threshold:=0.05
      -p object_vocab_list:=${MODEL_DIR}/fasterrcnn_label_list.txt
      -p model_checkpoint:=${MODEL_DIR}/fasterrcnn_res101_vg.pth

  - spatial_mapper: ros2 run angel_system_nodes spatial_mapper --ros-args
      -r __ns:=${ROS_NAMESPACE}
      -p sm_topic:=SpatialMapData
      -p det_topic:=ObjectDetections
      -p det_3d_topic:=ObjectDetections3d
      -p headset_pose_topic:=HeadsetPoseData

  - feedback_generator: ros2 run angel_system_nodes feedback_generator --ros-args
      -r __ns:=${ROS_NAMESPACE}
      -p activity_detector_topic:=ActivityDetections
      -p object_detection_topic:=ObjectDetections3d
      -p task_monitor_topic:=TaskUpdates
      -p arui_update_topic:=AruiUpdates
      -p interp_user_intent_topic:=UserIntentPredicted
